---
- name: Deploy to EC2
  hosts: localhost
  connection: local
  vars:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    aws_security_token: "{{ lookup('env', 'AWS_SESSION_TOKEN') }}"
    ssh_key: "{{ lookup('env', 'SSH_KEY') }}"
    ansible_python_interpreter: "/opt/pipx/venvs/ansible-core/bin/python"

  tasks:
    - name: Get existing EC2 instances
      amazon.aws.ec2_instance_info:
        region: us-east-1
      register: existing_instances
    
    - name: Launch EC2 Instance
      ec2_instance:
        instance_type: t2.medium
        image_id: ami-07caf09b362be10b8
        region: us-east-1
        key_name: Test
        vpc_subnet_id: subnet-0d981110c7439013c
        tags:
          Name: Eshop
        count: 1
        network:
          assign_public_ip: yes
        wait: yes
        security_groups: [eshop]
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ aws_security_token }}"
      register: ec2_instance_result

    - name: Add instance host to group
      add_host:
        hostname: "{{ item.public_ip_address }}"
        groupname: launched
      loop: "{{ ec2_instance_result.instances }}"

    # - name: Create SSH directory
    #   file:
    #     path: ~/.ssh
    #     state: directory
    #     mode: '0700'

    # - name: Create known hosts file
    #   file:
    #     path: ~/.ssh/known_hosts
    #     state: touch
    #     mode: '0600'

    - name: Get Public IP Address
      set_fact:
        ec2_public_ip: "{{ ec2_instance_result.instances[0].public_ip_address }}"

    # - name: Clear SSH Known Hosts
    #   command: ssh-keygen -R {{ ec2_public_ip }}
    #   ignore_errors: true

    # - name: Write SSH key to file
    #   ansible.builtin.copy:
    #     dest: /tmp/ssh_keys/Test.pem
    #     content: "{{ ssh_key }}"
    #     mode: '0600'
    
    # - name: Configure SSH for Ansible
    #   set_fact:
    #     ansible_ssh_private_key_file: /tmp/ssh_keys/Test.pem
    #     ansible_ssh_user: ec2-user
    #     ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Disable SSH Host Key Checking
      set_fact:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        ansible_ssh_user: ec2-user

    # - name: Wait for SSH connection
    #   delegate_to: "{{ item.public_dns_name }}"
    #   wait_for_connection:
    #     delay: 30
    #     timeout: 300
    #   loop: "{{ ec2_instance_result.instances }}"
    - name: Wait for SSH to come up
      wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: '{{ec2.instances}}'

- name: Configure EC2 Instances
  hosts: launched
  connection: ssh
  become: yes
  tasks:

    - name: Install Git and Docker
      become: yes
      apt:
        name:
          - git
          - docker
        state: latest
        update_cache: yes
    - service:
        name: docker
        state: started
        enabled: yes
    # - name: Set proper rights to Docker service
    #   become: yes
    #   shell: usermod -a -G docker ec2-user

    - name: Fetch eshop from Git
      become: yes
      git:
        repo: 'https://github.com/nativesixs/4IT572_sem.git'
        dest: ./app

    - name: Install Ansible dependencies
      pip:
        name:
          - requests
          - docker
          - boto3
    
    - name: Build Eshop Docker image
      become: yes
      docker_image:
        build:
          path: ./app
        name: eshop
        tag: latest
        source: build
    - name: Run Eshop Docker
      become: yes
      docker_container:
        name: eshop
        image: eshop
        state: started
        ports:
          - "80:3000"

    - name: Wait for eshop to run
      wait_for:
        port:
          80


# - name: Configure EC2 Instances
#   hosts: launched
#   connection: ssh
#   become: yes

#   tasks:
#     - name: Install Git and Docker
#       yum:
#         name:
#           - git
#           - docker
#         state: latest
#         update_cache: yes
#     - service:
#         name: docker
#         state: started
#         enabled: yes
#     - name: Set proper rights to Docker service
#       shell: usermod -a -G docker ec2-user

#     - name: Fetch eshop from Git
#       git:
#         repo: 'https://github.com/nativesixs/4IT572_sem.git'
#         dest: ./app
    
#     - name: Build Eshop Docker image
#       docker_image:
#         build:
#           path: ./app
#         name: eshop
#         tag: latest
#         source: build
#     - name: Run Eshop Docker
#       docker_container:
#         name: eshop
#         image: eshop
#         state: started
#         ports:
#           - "80:3000"

#     - name: Wait for eshop to run
#       wait_for:
#         port:
#           80







#     - name: Get Public IP Address
#       set_fact:
#         ec2_public_ip: "{{ ec2_instance_result.instances[0].public_ip_address }}"


# # ssh
#     - name: Configure SSH key for EC2 access
#       set_fact:
#         ansible_ssh_private_key_file: "{{ ssh_key }}"
    
#     - name: Create temporary directory
#       ansible.builtin.file:
#         path: /tmp/ssh_keys
#         state: directory

#     - name: Write SSH key to a file
#       ansible.builtin.copy:
#         dest: /tmp/ssh_keys/Test.pem
#         content: "{{ lookup('env', 'ssh_key') }}"
#         mode: '0600'

#     - name: Set SSH key for Ansible
#       set_fact:
#         ansible_ssh_private_key_file: /tmp/ssh_keys/Test.pem
#         ansible_ssh_user: ec2-user
#         ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

#     - name: Add EC2 Instance to Inventory
#       add_host:
#         hostname: "{{ ec2_public_ip }}"
#         groupname: ec2
#         ansible_ssh_user: ec2-user

#     - name: Get new EC2 instance ID
#       set_fact:
#         new_instance_id: "{{ ec2_instance_result.instances[0].instance_id }}"

#     # - name: Delete previous EC2 instances (excluding the new one)
#     #   amazon.aws.ec2_instance:
#     #     region: us-east-1
#     #     instance_ids: "{{ existing_instances.instances | map(attribute='instance_id') | difference([new_instance_id]) | list }}"
#     #     state: absent

#     - name: Add instance host to group
#       add_host:
#         hostname: "{{ item.public_ip_address }}"
#         groupname: launched
#       loop: "{{ ec2_instance_result.instances }}"

#     # - name: Wait for SSH connection
#     #   wait_for_connection:
#     #     delay: 30
#     #     timeout: 300
#     #   loop_control:
#     #     loop_var: item
#     #   loop: "{{ ec2_instance_result.instances }}"

#     - name: Configure EC2 in Ansible inventory
#       add_host:
#         hostname: "{{ ec2_public_ip }}"
#         groupname: web-servers
#         port: 80
        

# - name: Install Docker and Git on EC2
#   hosts: ec2
#   vars:
#     ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
#   tasks:
#     - name: Ensure connection
#       wait_for_connection:
#         delay: 30
#         timeout: 300

#     - name: Install Git and Docker
#       ansible.builtin.package:
#         name:
#           - git
#           - docker
#         state: latest

#     - name: Start Docker
#       service:
#         name: docker
#         state: started
#         enabled: yes


#     - name: Add ec2-user to Docker group
#       user:
#         name: ec2-user
#         groups: docker
#         append: true

#     - name: Fetch eshop from Git
#       git:
#         repo: 'https://github.com/nativesixs/4IT572_sem.git'
#         dest: ./app
    
#     - name: Build Eshop Docker image
#       docker_image:
#         build:
#           path: ./app
#         name: eshop
#         tag: latest
    
#     - name: Run Eshop Docker container
#       docker_container:
#         name: eshop
#         image: eshop
#         state: started
#         ports:
#           - "80:3000"

#     - name: Wait for Eshop to be accessible
#       wait_for:
#         port: 80

# # - name: Configure EC2 Instances
# #   hosts: launched
# #   connection: ssh
# #   become: yes

# #   tasks:
# #     - name: Install Git and Docker
# #       package:
# #         name:
# #           - git
# #           - docker
# #         state: latest
# #         update_cache: yes

# #     - name: Start Docker
# #       service:
# #         name: docker
# #         state: started
# #         enabled: yes

# #     - name: Add ec2-user to Docker group
# #       user:
# #         name: ec2-user
# #         groups: docker
# #         append: true

# #     - name: Fetch eshop from Git
# #       git:
# #         repo: 'https://github.com/nativesixs/4IT572_sem.git'
# #         dest: ./app
    
# #     - name: Build Eshop Docker image
# #       docker_image:
# #         build:
# #           path: ./app
# #         name: eshop
# #         tag: latest
    
# #     - name: Run Eshop Docker container
# #       docker_container:
# #         name: eshop
# #         image: eshop
# #         state: started
# #         ports:
# #           - "80:3000"

# #     - name: Wait for Eshop to be accessible
# #       wait_for:
# #         port: 80
