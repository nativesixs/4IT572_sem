---
- name: Deploy to EC2
  hosts: localhost
  connection: local
  vars:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    aws_security_token: "{{ lookup('env', 'AWS_SESSION_TOKEN') }}"
    ssh_key: "{{ lookup('env', 'SSH_KEY') }}"
    ansible_python_interpreter: "/opt/pipx/venvs/ansible-core/bin/python"
    instance_tag: "toBeReplaced"

  tasks:
    - name: Get existing EC2 instances
      amazon.aws.ec2_instance_info:
        region: us-east-1
      register: existing_instances

    - name: Terminate previous instances with tag
      ec2_instance:
        state: "absent"
        region: us-east-1
        instance_ids: "{{ existing_instances.instances | selectattr('tags.Name', 'equalto', instance_tag) | map(attribute='instance_id') | list }}"
      when: existing_instances.instances | selectattr('tags.Name', 'equalto', instance_tag) | list is not none and existing_instances.instances | selectattr('tags.Name', 'equalto', instance_tag) | list | count > 0

    
    - name: Launch EC2 Instance
      ec2_instance:
        # instance_type: t2.medium
        # image_id: ami-07caf09b362be10b8
        # region: us-east-1
        # key_name: Test
        # vpc_subnet_id: subnet-0d981110c7439013c
        instance_type: t2.medium
        image_id: ami-07caf09b362be10b8
        region: us-east-1
        key_name: devops
        vpc_subnet_id: subnet-0d981110c7439013c
        tags:
          Name: "{{ instance_tag }}"
          Environment: Eshop
        count: 1
        network:
          assign_public_ip: yes
        wait: yes
        security_groups: [eshop]
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ aws_security_token }}"
      register: ec2_instance_result

    - name: Add instance host to group
      add_host:
        hostname: "{{ item.public_ip_address }}"
        groupname: launched
      loop: "{{ ec2_instance_result.instances }}"

    - name: Get Public IP Address
      set_fact:
        ec2_public_ip: "{{ ec2_instance_result.instances[0].public_ip_address }}"



    - name: Ensure SSH directory exists
      file:
        path: ~/.ssh
        state: directory
        mode: '0700'

    - name: Add EC2 instance to known_hosts
      shell: |
        ssh-keyscan {{ ec2_public_ip }} >> ~/.ssh/known_hosts
      become: yes

    - name: Disable SSH Host Key Checking
      set_fact:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        ansible_ssh_user: ec2-user

    - name: Wait for SSH connection
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 30
        timeout: 300
      loop: "{{ ec2_instance_result.instances }}"


- name: Configure EC2 Instances
  hosts: launched
  connection: ssh
  become: yes
  tasks:


    - name: Install Git and Docker
      become: yes
      apt:
        name:
          - git
          - docker
        state: latest
        update_cache: yes
    - service:
        name: docker
        state: started
        enabled: yes
    # - name: Set proper rights to Docker service
    #   become: yes
    #   shell: usermod -a -G docker ec2-user

    - name: Fetch eshop from Git
      become: yes
      git:
        repo: 'https://github.com/nativesixs/4IT572_sem.git'
        dest: ./app

    - name: Install Ansible dependencies
      pip:
        name:
          - requests
          - docker
          - boto3
    
    - name: Build Eshop Docker image
      become: yes
      docker_image:
        build:
          path: ./app
        name: eshop
        tag: latest
        source: build
    - name: Run Eshop Docker
      become: yes
      docker_container:
        name: eshop
        image: eshop
        state: started
        ports:
          - "80:3000"

    - name: Wait for eshop to run
      wait_for:
        port:
          80
